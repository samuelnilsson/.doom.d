#+title: Configuration

* User interface

** Theme

Use doom-dracula theme.

#+begin_src emacs-lisp
(setq doom-theme 'catppuccin)
#+end_src

*** Org mode

Increase font size on org headers depending on header level.

#+begin_src emacs-lisp
(custom-theme-set-faces!
    'catppuccin
    '(org-level-3 :inherit outline-3 :height 1.2)
    '(org-level-2 :inherit outline-2 :height 1.5)
    '(org-level-1 :inherit outline-1 :height 1.75)
    '(org-document-title :height 2.0 :underline "t"))
#+end_src

*** Custom colors

Colorize the type-face since it was white as default..

#+begin_src emacs-lisp :tangle yes
(custom-set-faces!
  `(font-lock-type-face :foreground ,(doom-color 'magenta)))
#+end_src

** Window

Enable line numbers.

#+begin_src emacs-lisp
(setq display-line-numbers-type t)
#+end_src

** Opacity

#+begin_src emacs-lisp :tangle yes
(add-to-list 'default-frame-alist '(alpha . 98))
#+end_src

** Spacing

Increase line spacing for some breathing room.

#+begin_src emacs-lisp
(setq-default line-spacing 3)
#+end_src

** Font

*** Families

#+begin_src emacs-lisp :tangle yes
(setq doom-font (font-spec :family "Monaspace Neon Frozen" :size 16)
      doom-variable-pitch-font (font-spec :family "IBM Plex Sans" :size 16)
      doom-symbol-font (font-spec :family "Noto Sans Symbols")
      doom-emoji-font (font-spec :family "Noto Emoji")
      doom-serif-font (font-spec :family "IBM Plex Serif" :size 16)
      doom-big-font (font-spec :family "Monaspace Neon Frozen" :size 24))
#+end_src

*** Fonts for faces
Use some fun/quirky fonts for specific faces, for eye candy and to distinguish faces.
- "Machine-like" font for copilot.
- "Hand-written" font for comments.
- "Professional" font for documentation.

#+begin_src emacs-lisp :tangle yes
(custom-set-faces!
  '(copilot-overlay-face :family "Monaspace Krypton Frozen")
  '(font-lock-comment-face :family "Monaspace Radon Frozen")
  '(font-lock-doc-face :family "Monaspace Xenon Frozen"))
#+end_src

*** Mixed pitch

Enable mixed pitch for org-mode and markdown-mode, to have mono fonts for code and variable pitch font for text.

#+begin_src emacs-lisp :tangle yes
(setq +enabled-mixed-pitch-modes '(org-mode markdown-mode))
(dolist (hook +enabled-mixed-pitch-modes)
  (add-hook (intern (concat (symbol-name hook) "-hook")) #'mixed-pitch-mode))
#+end_src

** Syntax
*** Tree-sitter
Use tree-sitter from /tree-sitter-langs/.

#+begin_src emacs-lisp :tangle yes
(setq! treesit-extra-load-path (list (getenv "TREESITTER_GRAMMARS")))
#+end_src

Use a higher decoration level.

#+begin_src emacs-lisp :tangle yes
(setq treesit-font-lock-level 4)
#+end_src

* Org mode

** Directory

Set directory for org files.

#+begin_src emacs-lisp
(setq org-directory "~/wiki/")
(setq org-roam-directory "~/wiki/roam/")
#+end_src

** GTD

*** Capture templates

#+begin_src emacs-lisp
(after! org
    (setq org-capture-templates
          '(("t" "TODO" entry (file "inbox.org")
             "* TODO %?\n%i\n%a" :prepend t))))
#+end_src

*** Agenda files

Define org files to include in the agenda.

#+begin_src emacs-lisp
(setq org-gtd-agenda-files (list "inbox.org" "gtd.org" "tickler.org" "someday.org" "tickler-calendar.org"))
#+end_src

Set custom todo keywords.

#+begin_src emacs-lisp
(after! org
    (setq org-todo-keywords '((sequence "TODO(t)" "PROG(i)" "WAIT(w)" "|" "DONE(d)" "CNCL(c)"))
          org-todo-keywords-for-agenda '((sequence "TODO(t)" "PROG(i)" "WAIT(w)" "|" "DONE(d)" "CNCL(c)"))))
#+end_src

*** Todo list

Display the parent headers of each item (%b as in breadcrumbs).

#+begin_src emacs-lisp :tangle yes
(setq org-agenda-prefix-format
      '((agenda . " %i %?-12t% s %b ")
        (todo . " %i %b ")
        (tags . " %i %b ")
        (search . " %i %-12:c")))
#+end_src

*** Org super agenda

Use org-super-agenda to put the most important TODO items in groups.

#+begin_src emacs-lisp :tangle yes
(use-package! org-super-agenda
  :config
  (setq org-super-agenda-groups
        '((:name "Overdue"
           :deadline past
           :order 0)
          (:name "Due today"
           :deadline today
           :order 1)
          (:name "Start Today"
           :scheduled today
           :order 2)
          (:name "In progress"
           :todo "PROG"
           :order 3)
          (:name "Next up"
           :take (7 (:and (:todo "TODO"
                           :priority>= "B")))
           :order 4)
          (:name "Waiting"
           :todo "WAIT"
           :order 5)))
  (org-super-agenda-mode))
#+end_src

*** Keybindings

Use consult-org-agenda for searching agenda headers. It is faster and integrates with embark.

#+begin_src emacs-lisp :tangle yes
(map! :leader "nS" #'consult-org-agenda)
#+end_src

** Auto save

Auto save org buffers to avoid syncthing conflicts.

#+begin_src emacs-lisp :tangle yes
(add-hook 'auto-save-hook 'org-save-all-org-buffers)
#+end_src

** Prettify

Hide emphasis markers, such as markers for bold and cursive text.

#+begin_src emacs-lisp :tangle yes
(setq org-hide-emphasis-markers "t")
#+end_src

Remove some org modern features that I think is just distracting and looks bad with my font.

#+begin_src emacs-lisp :tangle yes
(setq org-modern-timestamp nil
      org-modern-tag nil
      org-modern-table nil
      org-modern-todo nil
      org-modern-priority nil
      org-modern-checkbox nil)
#+end_src

** Caldav

Sync caldav calendar to org.
The /org-caldav-sync/ interactive function is used to sync new calendars to the /org-caldav-inbox/ file.

Setting /org-caldav-sync-direction/ makes sure that the calendar is only synced one way, since I only use caldav for planning, not to create or edit events.

#+begin_src emacs-lisp :tangle yes
(unless (string= "" (getenv "DOOM_CALDAV_SERVER"))
  (use-package! org-caldav
    :config
    (setq org-caldav-url (getenv "DOOM_CALDAV_SERVER"))
    (setq org-caldav-calendar-id (getenv "DOOM_CALDAV_CALENDAR_ID"))
    (setq org-caldav-inbox "~/wiki/tickler-calendar.org")
    (setq org-caldav-uuid-extension ".EML")
    (setq org-caldav-files nil)
    (setq org-caldav-sync-direction 'cal->org)))
#+end_src

** Roam

*** Dailies

Add a timestamp to the header of newly captured entries in org-roam daily journals.

#+begin_src emacs-lisp :tangle yes
(setq org-roam-dailies-capture-templates
      '(("d" "default" entry "* %<%H:%M> %?"
         :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
#+end_src

** Jira

Using jira in org-mode is more fun.

#+begin_src emacs-lisp :tangle yes
(unless (string= "" (getenv "DOOM_JIRA_URL"))
  (use-package! org-jira
    :config
    (setq jiralib-url (getenv "DOOM_JIRA_URL"))
    (setq jiralib-user (getenv "DOOM_JIRA_USER"))
    (let ((dir "~/.org-jira"))
      (unless (file-exists-p dir)
        (make-directory dir t)))
    (let ((extra-config (message (nth 0 (split-string (getenv "DOOM_JIRA_EXTRA_CONF") ":")))))
      (when (file-exists-p extra-config)
        (load-file extra-config)))))
#+end_src

* Keybindings

** Mac

Switch modifier keys on mac to be consistent with Linux.

#+begin_src emacs-lisp :tangle yes
(setq mac-command-modifier 'control)
(setq mac-control-modifier 'super)
#+end_src

* Completion
** Corfu
*** Dict

The dictionary to use is determined by [[*Language detection][Language detection]].

Enable dict completion combined with dabbrev (completion from open buffers) in all text writing modes.

#+begin_src emacs-lisp :tangle yes
(add-hook! text-mode (add-hook 'completion-at-point-functions (cape-capf-super #'cape-dabbrev #'cape-dict) 100 t))
#+end_src

*** Programming

Always use dabbrev as a last resort for programming modes.

#+begin_src emacs-lisp :tangle yes
(add-hook! prog-mode (add-hook 'completion-at-point-functions #'cape-dabbrev 100 t))
#+end_src

* Languages

** Markdown

Enable differently sized headers.

#+begin_src emacs-lisp :tangle yes
(custom-set-faces!
  '(markdown-header-face-1 :height 2.0)
  '(markdown-header-face-2 :height 1.7)
  '(markdown-header-face-3 :height 1.4)
  '(markdown-header-face-4 :height 1.2)
  '(markdown-header-face-5 :height 1.1)
  '(markdown-header-face-6 :height 1.0))
#+end_src

Tables won't align when not using a monospace font.

#+begin_src emacs-lisp :tangle yes
(custom-set-faces!
  '(markdown-table-face :family "Monaspace Neon Frozen"))
#+end_src

* AI
** Completion

Enable copilot when enabled by the environment variable *DOOM_COPILOT_ENABLE*.
Remap tab to prioritize copilot over /corfu/ completion.

Setting /copilot-version/ to /nil/ makes copilot.el use the Microsoft official language server protocol for copilot.

#+begin_src emacs-lisp
(use-package! copilot
  :if (string-equal (getenv "DOOM_COPILOT_ENABLE") "t")
  :hook (csharp-mode . copilot-mode)
  :config (setq copilot-version nil)
  :bind (:map copilot-completion-map
        ("<tab>" . 'copilot-accept-completion)
        ("TAB" . 'copilot-accept-completion)))
#+end_src

** Chat

*** gptel

Use gptel to interact with ollama language models.

#+begin_src emacs-lisp :tangle yes
(use-package! gptel
  :if (string-equal (getenv "DOOM_GPTEL_ENABLE") "t")
  :demand t
  :preface
  (defun gptel-for-readme ()
    (setq-local gptel-backend (gptel-get-backend "Ollama"))
    (setq-local gptel-model 'deepseek-r1:32b)
    (setq-local gptel-system
                "You are a crisp technical writer. Output clean Markdown with short sections, bullet lists, and examples. Prefer active voice."))

  (defun gptel-for-programming ()
    (setq-local gptel-backend (gptel-get-backend "Ollama"))
    (setq-local gptel-model 'codellama:34b)
    (setq-local gptel-system
                "You are a careful programmer. Show minimal runnable code with comments. Note assumptions, complexity, and edge cases. Provide tests when useful."))

  :hook ((prog-mode . gptel-for-programming)
         (markdown-mode . gptel-for-readme)
         (org-mode . gptel-for-readme))
  :config
  (setq gptel-model 'deepseek-r1:32b
        gptel-default-mode #'org-mode)
  (gptel-make-ollama "Ollama"
    :host "localhost:11434"
    :stream t
    :models '(deepseek-r1:32b codellama:34b)))
#+end_src

* Other

** Revert buffer automatically

Always revert a buffer when the underlying file changes on disk.

#+begin_src emacs-lisp :tangle yes
(global-auto-revert-mode 1)
#+end_src

** SSH

*** Tramp

Make tramp find all executable files in path on remote NixOS systems.

#+begin_src emacs-lisp
(after! tramp
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path))
#+end_src

** Rest client

#+begin_src emacs-lisp :tangle yes
(use-package! verb
    :hook
    (verb-mode . (lambda () (setq-local network-stream-use-client-certificates t)))
    :config
    (setq verb-auto-kill-response-buffers t))
#+end_src

** Spell checking

Enable spell checking for both Swedish and English.

#+begin_src emacs-lisp :tangle yes
(after! ispell
    (setq ispell-dictionary "en_US,sv_SE")
    (ispell-set-spellchecker-params)
    (ispell-hunspell-add-multi-dic "en_US,sv_SE"))
#+end_src

*** Language detection

To be able to switch between writing in English and Swedish seamlessly the language is detected automatically by using the guess-language package.
It sets the correct dictionary to use for spell checking and completion depending on the language detected.

Guess language mode is only activated for text modes.
*guess-language-mode* makes sure that the correct dictionary file is used for spell checking.

#+begin_src emacs-lisp :tangle yes
(use-package! guess-language
  :hook (text-mode . guess-language-mode)
  :config
  (setq guess-language-languages '(en sv))
  (setq guess-language-min-paragraph-length 35))
  (setq guess-language-langcodes
  '((en . ("en_US" "English" nil "English"))
    (sv . ("sv_SE" "Swedish" nil "Swedish"))))
#+end_src

Hook into when a new language is detected and set the correct cape-dict file used depending on the language.

#+begin_src emacs-lisp :tangle yes
(defun set-cape-dict (lang beginning end)
  (setq cape-dict-file  (pcase lang
                          ('en (getenv "DOOM_DICT_ENG"))
                          ('sv (getenv "DOOM_DICT_SWE"))
                          )))

(add-hook 'guess-language-after-detection-functions #'set-cape-dict)
#+end_src

** Graphs

Use mermaid tree-sitter mode for graphs/diagrams.

#+begin_src emacs-lisp
(use-package! mermaid-mode)
(use-package! mermaid-ts-mode
  :hook (mermaid-mode . mermaid-ts-mode))
#+end_src

Enable executing mermaid from org src blocks.

#+begin_src emacs-lisp :tangle yes
(use-package ob-mermaid
  :init (org-babel-do-load-languages
         'org-babel-load-languages
         '((mermaid . t)
           (scheme . t)
           ))
  :config (setq ob-mermaid-cli-path (getenv "MMDC_PATH"))
  )
#+end_src

** Calendar

Set monday as first day of week to display in calendar.

#+begin_src emacs-lisp :tangle yes
(setq calendar-week-start-day 1)
#+end_src
